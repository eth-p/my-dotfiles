-- my-dotfiles | Copyright (C) 2025 eth-p
-- Repository: https://github.com/eth-p/my-dotfiles
-- =============================================================================
-- DO NOT EDIT! This file is generated by home-manager.
-- To customize, create a `config.lua` file:
--
--     return {
--         opts = {},
--         ready = function()
--             -- called after lazy.nvim
--         end,
--     }
--
-- =============================================================================

-- DO NOT ALLOW REQUIRING MODULES FROM THE WORKING DIRECTORY!
package.path = package.path:gsub("./%?.lua;", "")
package.cpath = package.cpath:gsub("./%?.so;", "")

--============================================================================--
--=== Utility Functions ===--

local function read_json_file(path)
	local uv = vim.uv
	local stat = uv.fs_stat(path)
	if not stat then
		return nil
	end

	local fd = assert(uv.fs_open(path, "r", 448))
	local raw = assert(uv.fs_read(fd, stat.size, 0))
	assert(uv.fs_close(fd))
	return vim.json.decode(raw, {
		luanil = {
			object = true,
			array = true,
		},
	})
end

--============================================================================--
--=== Config Loading ===--

local config_home = vim.fn.stdpath("config")

-- Load options managed by home-manager.
local managed_config = read_json_file(
	config_home .. "/managed-by-home-manager.json"
) or {}

-- Load mutable config from config.lua
local user_config = {}
if vim.uv.fs_stat(config_home .. "/config.lua") then
	user_config = dofile(config_home .. "/config.lua") or {}
end

--============================================================================--
--=== Initialize ===--

require("eth-p") {
	opts = vim.tbl_deep_extend(
		"force",
		managed_config.opts or {},
		user_config.opts or {}
	),
	plugins = {
		(managed_config.plugins or {}),
		(user_config.plugins or {}),
	},
}

-- Set up nvim-treesitter plugin.
require("nvim-treesitter.configs").setup {
	auto_install = false,
	highlight = {
		enable = true,
	},
}
