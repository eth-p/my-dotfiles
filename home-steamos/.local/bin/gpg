#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2023 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
# =============================================================================
#
# Warning
# -------
#
#    This script is meant to run on a Steam Deck!
#    DO NOT INSTALL IT ON OTHER SYSTEMS.
#
# Summary
# -------
#
#    A wrapper around 'gpg', prompting to unlock the vault.
#
#
# =============================================================================
set -euo pipefail
VAULT="Identity"
VAULTTOOLS="${HOME}/.local/libexec/vault-tools"

# Function to run vault-tools.
vault-tools() {
	"$VAULTTOOLS" "$@"
	return $?
}

# Function to replace the process with the real gpg command.
# This does not return.
gpg() {
	COMMAND_GPG="$(which -a gpg | sed '1d' | head -n1)"
	exec "$COMMAND_GPG" "$@"
}

# Attempt to unlock the vault.
if [[ "$(vault-tools status "$VAULT" --plain)" = "locked" ]]; then
	printf "The %s vault is currently locked.\n" "$VAULT" 1>&2
	printf "Please unlock it to use GPG.\n\n" 1>&2
	if "$VAULTTOOLS" unlock "$VAULT"; then
		printf "You may now use GPG.\n" 1>&2
	fi
fi

# If the vault was unlocked successfully, use the updated GNUPGHOME.
if [[ "$(vault-tools status "$VAULT" --plain)" = "unlocked" ]]; then
	export GNUPGHOME="$(vault-tools getconf "$VAULT" mountpoint)/gnupg"
else
	printf "Warning: Not using the vaulted GPG.\n" 1>&2
fi

# Run the real gpg.
gpg "$@"
exit $?
