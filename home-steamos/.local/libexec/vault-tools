#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2024 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
# =============================================================================
#
# Summary
# -------
#
#   A bash script for querying, locking, and unlocking KDE Plasma vaults.
#   This enables programmatic or command-line control over vaults.
#
#   It can be used as a library for other bash scripts, if desired.
#
# How it's used in my-dotfiles
# ----------------------------
#
#   This is used in various other scripts to ensure that the vault is unlocked
#   whenever it needs to be.
#
# =============================================================================
set -euo pipefail

# -----------------------------------------------------------------------------
# Utility functions.
# -----------------------------------------------------------------------------

_vaulttools:argerr() {
	# Get the caller function.
	local caller="${PROGRAM_NAME:-}"
	if [[ -z "$caller" ]]; then
		for caller in "${FUNCNAME[@]}"; do
			if [[ "${caller:0:12}" != "_vaulttools:" ]]; then break; fi
		done
	fi

	# Print the message.
	if [[ "$#" -gt 1 ]]; then
		printf "%s: $1\n" "$caller" "${@:2}" 1>&2
	else
		printf "%s: $1\n" "$caller" 1>&2
	fi
	return 10
}

# -----------------------------------------------------------------------------
# Functions for unlocking vaults.
# -----------------------------------------------------------------------------

_vaulttools:lock:gocryptfs() {
	eval "$1"
	eval "local mountpoint=\"\${${__vault_info_var__}[mountpoint]}\""
	fusermount -u "$mountpoint"
}

_vaulttools:unlock:gocryptfs() {
	eval "$1"
	eval "local mountpoint=\"\${${__vault_info_var__}[mountpoint]}\""
	eval "local source=\"\${${__vault_info_var__}[source]}\""
	gocryptfs "$source" "$mountpoint" -passfile /dev/stdin 2>&1 | \
		sed '/passfile/d; /Decrypting/d; /authentication failed/d;' 1>&2
}


# -----------------------------------------------------------------------------
# Functions for prompting passwords.
# -----------------------------------------------------------------------------

_vaulttools:prompt:stdin() {
	# Print the error message.
	if [[ -n "$2" ]]; then
		if [[ -t 2 ]]; then
			printf "\x1B[31m%s\x1B[m\n" "$2" 1>&2
		else
			printf "%s\n" "$2" 1>&2
		fi
	fi

	# Prompt for the password.
	local password
	read -rs -p "Password: " password
	printf "\n" 1>&2
	if [[ -z "$password" ]]; then
		return 1
	fi

	# Print the password back.
	echo "$password"
}

_vaulttools:prompt:zenity() {
	local message="Enter password for $1."
	if [[ -n "$2" ]]; then
		message="${message}"$'\n'"$2"
	fi

	zenity --entry --hide-text \
		--title="Unlock Vault" \
		--window-icon=/usr/share/icons/breeze/emblems/22@2x/emblem-locked.svg \
		--icon-name=emblem-encrypted-unlocked \
		--text="$message" 2>/dev/null
}

_vaulttools:prompt:pinentry() {
	local message="Enter password for $1."
	if [[ -n "$2" ]]; then
		message="${message}"$'\n'"$2"
	fi

	# Determine pinentry program to use.
	local pinentry
	local agent_conf="${GNUPGHOME:-$HOME/.gnupg}/gpg-agent.conf"
	pinentry="$(
		grep '^pinentry-program[ \t][ \t]*' "$agent_conf" 2>/dev/null | \
		sed 's/^pinentry-program[ \t][ \t]*//'
	)" || true

	if [[ -z "$pinentry" ]]; then
		pinentry="$(gpgconf | grep '^pinentry:' | cut -d':' -f3-)"
	fi

	# Call the pinentry program.
	"$pinentry" < <(
		echo "SETDESC A program is requesting to unlock the Plasma \"$1\" vault.%0APlease enter the vault password."
		echo "SETPROMPT Password:"
		echo "SETTITLE Unlock Vault"
		if [[ -n "$2" ]]; then
			echo "SETERROR $(sed 's/%/%25/g; s/\n/%0A/g' <<< "$2")"
		fi
		echo "GETPIN"
		echo "BYE"
	) | grep "^D " | sed 's/^D //'
}


# -----------------------------------------------------------------------------
# Functions for parsing the vault configuration file.
# -----------------------------------------------------------------------------

# Gets the path to the KDE Plasma vault configuration file.
#
# Synopsis:
#   vaults:config_file [options]
#
# Options:
#   -a   --all            -- Print all found configuration files.
#   -q   --quiet          -- Suppresses all output.
#
# Output:
#   STDOUT                -- Newline-delimited list of config files.
#   STDERR                -- An error message if no files were found.
#
# Return:
#   0                     -- Success
#   1                     -- Could not find file.
#   10                    -- Invalid argument(s).
vaults:config_file() {
	local candidate_files=()
	local opt_all=false
	local opt_quiet=false

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			-a|--all)   opt_all=true   ;;
			-q|--quiet) opt_quiet=true ;;
			*) _vaulttools:argerr "unknown argument: %s" "$1" ;;
		esac
		shift
	done

	# Priority 0: XDG_CONFIG_HOME
	if [[ -n "${XDG_CONFIG_HOME:-}" ]]; then
		candidate_files+=("${XDG_CONFIG_HOME}/plasmavaultrc")
	fi

	# Priority 1: XDG_CONFIG_DIRS
	local dir
	if [[ -n "${XDG_CONFIG_DIRS:-}" ]]; then
		while read -rd':' dir; do
			candidate_files+=("${dir}/plasmavaultrc")
		done <<< "${XDG_CONFIG_DIRS}:"
	fi

	# Priority 2: HOME/.config
	candidate_files+=("${HOME}/.config/plasmavaultrc")

	# Scan for the config file.
	local found=false
	local file
	for file in "${candidate_files[@]}"; do
		if ! [[ -f "$file" ]]; then
			continue
		fi

		# Print the file path.
		if ! "$opt_quiet"; then
			found=true
			printf "%s\n" "$file"
		fi

		# Break from the loop unless listing all.
		if ! "$opt_all"; then
			break
		fi
	done

	if "$found"; then
		return 0
	fi

	# Could not find it.
	if ! "$opt_quiet"; then
		printf "error: could not find plasmavaultrc at any of:\n" 1>&2
		printf " - %s\n" "${candidate_files[@]}" 1>&2
	fi

	return 1
}

# Reads and parses the KDE Plasma vault configuration file, converting it into
# a newline-delimited sequence of eval-able bash scripts.
#
# Example:
#   while read -r script; do
#     eval "$script"
#     ...
#   done < <(vaults:config_read <var>)
#
# Options:
#       --rcfile=<path>   -- The config file to parse.
#
# Output:
#   STDOUT                -- Lines of bash that can evaluated to set variables.
#     declare -A <var>        -- The associative array containing vault info.
#     <var>[name]=...         -- The name of the vault.
#     <var>[mountpoint]=...   -- The location of the unlocked vault.
#     <var>[source]=...       -- The location of the encrypted vault data.
#     <var>[backend]=...      -- The backend encryption program.
#
# Return:
#   0                     -- Success
#   10                    -- Invalid argument(s).
vaults:config_read() {
	local opt_var=""
	local opt_rcfile=

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--rcfile=*) opt_rcfile="${1:9}" ;;
			-*) _vaulttools:argerr "unknown argument: %s" "$1" ;;
			*) {
				if [[ -n "${opt_var}" ]]; then
					_vaulttools:argerr "too many arguments: %s" "$1"
				fi
				opt_var="$1"
			} ;;
		esac
		shift
	done

	if [[ -z "$opt_var" ]]; then
		_vaulttools:argerr "missing required positional argument 'var'"
	fi

	if [[ -z "$opt_rcfile" ]]; then
		opt_rcfile="$(vaults:config_file)"
	fi

	# Read the file.
	declare -A fields=()
	local eof=false
	local line=
	local section
	local key value
	{
	# Prompt the user for the password

		# Skip any leading lines that are not part of an INI section.
		while read -r line; do
			case "$line" in
				"["*)                 break;;
				*)                    :;;      # Not a section header.
			esac
		done

		# If the current line is not part of an INI section, the fd is EOF.
		# The file does not contain any ini sections.
		if [[ "${line:0:1}" != "[" ]]; then
			return 0
		fi

		# Parse the current section.
		while true; do
			# Print out the section that was just parsed (if applicable).
			case "${fields[source]:-}" in
				"")                 :;; # Nothing was parsed yet.
				"EncryptedDevices") :;; # Not a vault.
				"UI-notice")        :;; # Not a vault.
				*) {
					printf "local __vault_info_var__=%q;" "$opt_var"
					printf "declare -A %q;%q=();" "$opt_var" "$opt_var"
					for key in "${!fields[@]}"; do
						printf "%q[%q]=%q;" "$opt_var" "$key" "${fields[$key]}"
					done
					printf "\n"
				};;
			esac

			# If EOF was reached, don't try to parse anything from a closed fd.
			if "$eof"; then
				return 0
			fi

			# Parse the section name.
			[[ $line =~ ^\[([^\]]+)\]$ ]]
			section="${BASH_REMATCH[1]}"
			fields=()
			fields[source]="$section"

			# Then parse the contents until a new section header comes up.
			while read -r line; do
				if [[ "${line:0:1}" = "[" ]]; then
					continue 2
				fi

				key="${line%=*}"
				value="${line#*=}"
				fields[${key,,}]="$value"
			done

			# EOF reached.
			eof=true
		done
	} < <(
		sed -u '
			s/^[ \t]*//;
			s/[ \t]*$//;
			/^$/d;
			/^#/d;
			s/^\([^=]*\)[ \t]*=[ \t]*\(.*\)/\1=\2/
		' "$opt_rcfile"
	)
}

# Reads and parses the KDE Plasma vault configuration file,
# extracting a specific vault by name.
#
# Synopsis:
#   vaults:config_get [options] <vault_name>
#
# Options:
#       --rcfile=<path>   -- The config file to parse.
#
# Output:
#   STDOUT                -- The vault info script. This can be eval'ed.
#
# Return:
#   0                     -- Success
#   10                    -- Invalid argument(s).
vaults:config_get() {
	local fwd_config_open=()
	local args=()

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--rcfile=*)   fwd_config_open+=("$1") ;;
			-*) _vaulttools:cmderr "unknown argument: %s" "$1"; return 10 ;;
			*)  args+=("$1")
		esac
		shift
	done

	if [[ "${#args[@]}" -lt 1 ]]; then
		_vaulttools:argerr "missing required positional argument 'vault_name'"
		return 10
	fi

	if [[ "${#args[@]}" -gt 2 ]]; then
		_vaulttools:argerr "too many arguments"
		return 10
	fi

	# Parse the config file.
	vaults:config_read __vault "${fwd_config_open[@]}"
	local __vault
	local script
	local found=false
    while read -r script; do
		eval "$script"
		if [[ "${__vault[name]}" = "${args[0]}" ]]; then
			echo "$script"
			return 0
		fi
    done < <(vaults:config_read __vault "${fwd_config_open[@]}")

	if ! "$found"; then
		_vaulttools:argerr "no vault with name '%s'" "${args[0]}" || true
		return 1
	fi
}

# Checks if a vault is locked.
#
# Synopsis:
#   vaults:is_locked [options] <vault_info_script>
#
# Return:
#   0                     -- Vault is locked.
#   1                     -- Vault is NOT locked.
#   10                    -- Invalid argument(s).
vaults:is_locked() {
	local opt_quiet=false
	local args=()

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--*) _vaulttools:argerr "unknown argument: %s" "$1" ;;
			*) args+=("$1") ;;
		esac
		shift
	done

	if [[ "${#args[@]}" -lt 1 ]]; then
		_vaulttools:argerr "missing required positional argument 'vault_info_script'"
	fi

	if [[ "${#args[@]}" -gt 1 ]]; then
		_vaulttools:argerr "too many arguments"
	fi

	# Extract the mountpoint.
	eval "${args[0]}"
	eval "local mountpoint=\"\${${__vault_info_var__}[mountpoint]}\""

	# Check the mountpoint directory does not exist or is not a mount point,
	# then the vault is *probably* locked.
	if [[ ! -d "$mountpoint" ]] || ! mountpoint "$mountpoint" &>/dev/null; then
		return 0
	fi

	return 1
}

# Checks if a vault is unlocked.
#
# Synopsis:
#   vaults:is_unlocked [options] <vault_info_script>
#
# Return:
#   0                     -- Vault is unlocked.
#   1                     -- Vault is NOT unlocked.
#   10                    -- Invalid argument(s).
vaults:is_unlocked() {
	if vaults:is_locked "$@"; then
		return 1
	fi

	local status="$?"
	case "$status" in
		1) return 0 ;;
		*) return $status ;;
	esac
}

# Locks a vault.
#
# Synopsis:
#   vaults:lock [options] <vault_info_script>
#
# Return:
#   0                     -- Success.
#   11                    -- Unsupported vault backend.
#   12                    -- Vault is already locked.
vaults:lock() {
	local opt_quiet=false
	local args=()

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--*) _vaulttools:argerr "unknown argument: %s" "$1" ;;
			*) args+=("$1") ;;
		esac
		shift
	done

	if [[ "${#args[@]}" -lt 1 ]]; then
		_vaulttools:argerr "missing required positional argument 'vault_info_script'"
	fi

	if [[ "${#args[@]}" -gt 1 ]]; then
		_vaulttools:argerr "too many arguments"
	fi

	# Check that the vault is not already locked.
	local script="${args[0]}"
	if vaults:is_locked "$script"; then
		return 12
	fi

	# Extract necessary variables.
	eval "$script"
	eval "local backend=\"\${${__vault_info_var__}[backend]}\""

	# Check that the backend is supported.
	if ! [[ "$(type -t "_vaulttools:lock:${backend}")" = "function" ]]; then
		_vaulttools:argerr "locking vaults using the %s backend is not supported" \
			"${backend}" || true
		return 11
	fi

	# Run the function to do the locking for this backend.
	"_vaulttools:lock:${backend}" "$script"
	return $?
}

# Unlocks a vault.
#
# Synopsis:
#   vaults:unlock [options] <vault_info_script>
#
# Return:
#   0                     -- Success.
#   11                    -- Unsupported vault backend.
#   12                    -- Vault is already unlocked.
vaults:unlock() {
	local opt_quiet=false
	local args=()

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--*) _vaulttools:argerr "unknown argument: %s" "$1" ;;
			*) args+=("$1") ;;
		esac
		shift
	done

	if [[ "${#args[@]}" -lt 1 ]]; then
		_vaulttools:argerr "missing required positional argument 'vault_info_script'"
	fi

	if [[ "${#args[@]}" -gt 1 ]]; then
		_vaulttools:argerr "too many arguments"
	fi

	# Check that the vault is not already unlocked.
	local script="${args[0]}"
	if vaults:is_unlocked "$script"; then
		return 12
	fi

	# Extract necessary variables.
	eval "$script"
	eval "local backend=\"\${${__vault_info_var__}[backend]}\""

	# Check that the backend is supported.
	if ! [[ "$(type -t "_vaulttools:unlock:${backend}")" = "function" ]]; then
		_vaulttools:argerr "unlocking vaults using the %s backend is not supported" \
			"${backend}" || true
		return 11
	fi

	# Run the function to do the unlocking for this backend.
	"_vaulttools:unlock:${backend}" "$script"
	return $?
}



# =============================================================================
# END OF SCRIPT WHEN SOURCED
# =============================================================================
if [[ "${BASH_SOURCE[0]}" != "$0" ]]; then return 0; fi
# =============================================================================

# -----------------------------------------------------------------------------
# Help documentation printer.
# -----------------------------------------------------------------------------

print_doc:heading() {
	printf "%s\n" "$1"
}

print_doc:line() {
	printf "%s\n" "$1"
}

print_doc:section() {
	if [[ "$(type -t "print_doc:section:${section}")" = "function" ]]; then
		if "print_doc:section:${section}" "$@"; then
			return 0
		fi
	fi

	case "$section" in
		*) sed 's/^/  /' ;;
	esac
}

if [[ -t 1 ]]; then
	print_doc:heading() {
		printf "\x1B[1m%s\x1B[m\n" "$1"
	}

	print_doc:section:example() {
		if ! command -v bat &>/dev/null; then
			return 1
		fi

		sed 's/^/  /' |\
		bat --language=bash \
			--paging=never \
			-pp
	}

	print_doc:section:synopsis() {
		sed '
			s/^/  /;
			s/<\([^>]*\)>/\x1B[4m\1\x1B[m  /g;
			s/\(\[[^\x5D]*]\)/\x1B[2m\1\x1B[m/g;
			s/ \(-[^ -]\)/ \1/g;
			s/ \(--[^ ]\{1,\}\)/ \x1B[34m\1\x1B[m/g;
		'
	}

	print_doc:section:options() {
		print_doc:section:synopsis "$@" | sed '
			s/ -- \(.*\)$/\x1B[2m -- \1\x1B[m/
		'
	}

	print_doc:section:subcommands() {
		print_doc:section:options "$@"
	}
fi

print_doc() {
	local section=''
	local buffer=''
	local line

	while IFS='' read -r line; do
		# If it's an indented section, keep collecting it into a buffer.
		# It will be flushed later.
		if [[ "${line:0:2}" = "  " ]]; then
			buffer="${buffer}"$'\n'"${line:2}"
			continue
		fi

		# Flush the section.
		if [[ -n "$buffer" ]]; then
			print_doc:section "$section" <<< "${buffer:1}"
			buffer=""
		fi

		# Other cases:
		case "$line" in
			"<<doc:"*">>") :;; # Don't print the declaration.
			"<<!embed:"*">>") print_doc "${line:9:$(( ${#line} - 9 - 2 ))}" ;;
			*:) {
				section="${line%:*}"
				section="${section,,}"
				print_doc:heading "${line%:*}"
			} ;;
			*) {
				print_doc:line "$line"
			} ;;
		esac
	done < <(awk -v sp="[ \t]*##[ \t]*<<doc:${1}>>[ \t]*\$" '
		BEGIN { visible=0 }
		/^$/ { visible=0 }
		/##/ {if (visible) { print $0 }}
		$0~sp { visible=1 }
	' "${BASH_SOURCE[0]}" | sed -u "s/^[ \t]*## \{0,1\}//; s/\\\$0/$(basename -- "$0")/g")

	if [[ -n "$buffer" ]]; then
		print_doc:section "$section" <<< "${buffer:1}"
		buffer=""
	fi
}

_vaulttools:cmderr() {
	_vaulttools:argerr "$@" || true
	printf "\n"
	print_doc "help:${FUNCNAME[1]:11}:usage"
	return 10
}

# -----------------------------------------------------------------------------
# Subcommands.
# -----------------------------------------------------------------------------

## <<doc:help:status>>
## $0 status: checks if a vault is locked or unlocked
##
## <<doc:help:status:usage>>
## Synopsis:
##   $0 status [options] <vault_name>
##
## Options:
##       --rcfile=<path>  -- The config file to use.
##   -p  --plain          -- Always return zero and only print the "locked" or "unlocked".
##
## Return:
##   0                    -- The vault is unlocked.
##   1                    -- The vault is locked.
##   10                   -- Invalid argument(s).
subcommand:status() {
	local fwd_config_open=()
	local opt_plain=false
	local args=()

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--rcfile=*)   fwd_config_open+=("$1") ;;
			-p|--plain)   opt_plain=true ;;
			-*) _vaulttools:cmderr "unknown argument: %s" "$1"; return 10 ;;
			*)  args+=("$1")
		esac
		shift
	done

	if [[ "${#args[@]}" -lt 1 ]]; then
		_vaulttools:cmderr "missing required positional argument 'vault_name'"
		return 10
	fi

	if [[ "${#args[@]}" -gt 2 ]]; then
		_vaulttools:cmderr "too many arguments"
		return 10
	fi

	# Get the vault config.
	local script
	script="$(vaults:config_get "${args[0]}")"

	eval "$script"
	eval "local name=\"\${${__vault_info_var__}[name]}\""

	# Check if the vault is locked.
	if vaults:is_locked "$script"; then
		if "$opt_plain"; then
			echo "locked"
		elif [[ -t 1 ]]; then
			printf "%s is \x1B[31mlocked\x1B[m.\n" "$name"
		else
			printf "%s is locked.\n" "$name"
		fi
	else
		if "$opt_plain"; then
			echo "unlocked"
		elif [[ -t 1 ]]; then
			printf "%s is \x1B[32munlocked\x1B[m.\n" "$name"
		else
			printf "%s is unlocked.\n" "$name"
		fi
	fi
}

## <<doc:help:getconf>>
## $0 getconf: gets configuration info about a vault
##
## <<doc:help:getconf:usage>>
## Synopsis:
##   $0 getconf [options] <vault_name> [column...]
##
## Options:
##           --rcfile=<path>   -- The config file to use.
##   -d<ch>  --delimiter=<ch>  -- A delimiter to separate fields.
##
## Return:
##   0                         -- Success
##   10                        -- Invalid argument(s).
subcommand:getconf() {
	local fwd_config_open=()
	local opt_delim=' '
	local args=()

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--rcfile=*)    fwd_config_open+=("$1") ;;
			-d?)           opt_delim="${1:2}" ;;
			--delimiter=?) opt_delim="${1:12}" ;;
			-*) _vaulttools:cmderr "unknown argument: %s" "$1"; return 10 ;;
			*)  args+=("$1")
		esac
		shift
	done

	if [[ "${#args[@]}" -lt 1 ]]; then
		_vaulttools:cmderr "missing required positional argument 'vault_name'"
		return 10
	fi

	# Get the vault config.
	local script
	script="$(vaults:config_get "${args[0]}")"

	eval "$script"

	# Print info.
	local column
	local buffer=''
	for column in "${args[@]:1}"; do
		buffer="${buffer}${opt_delim}$(eval "printf '%s' \"\${${__vault_info_var__}["$column"]:-<null>}\"")"
	done

	printf "%s\n" "${buffer:1}"
	return 0
}

## <<doc:help:lock>>
## $0 lock: locks a vault
##
## <<doc:help:lock:usage>>
## Synopsis:
##   $0 lock [options] <vault_name>
##
## Options:
##       --rcfile=<path>  -- The config file to use.
##
## Return:
##   0                    -- Success.
##   10                   -- Invalid argument(s).
##   11                   -- Unsupported vault backend.
##   12                   -- Vault is already locked.
subcommand:lock() {
	local fwd_config_open=()
	local args=()

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--rcfile=*)   fwd_config_open+=("$1") ;;
			-*) _vaulttools:cmderr "unknown argument: %s" "$1"; return 10 ;;
			*)  args+=("$1")
		esac
		shift
	done

	if [[ "${#args[@]}" -lt 1 ]]; then
		_vaulttools:cmderr "missing required positional argument 'vault_name'"
		return 10
	fi

	if [[ "${#args[@]}" -gt 2 ]]; then
		_vaulttools:cmderr "too many arguments"
		return 10
	fi

	# Get the vault config.
	local script
	script="$(vaults:config_get "${args[0]}")"

	eval "$script"
	eval "local name=\"\${${__vault_info_var__}[name]}\""

	# Check if the vault is already locked.
	if vaults:is_locked "$script"; then
		printf "%s is already locked.\n" "$name"
		return 12
	fi

	# Lock the vault.
	vaults:lock "$script"
}

## <<doc:help:unlock>>
## $0 unlock: unlocks a vault
##
## <<doc:help:unlock:usage>>
## Synopsis:
##   $0 unlock [options] <vault_name>
##
## Options:
##       --rcfile=<path>  -- The config file to use.
##       --prompt=<type>  -- The prompt type.
##
## Prompt Types:
##   stdin                -- Specify the password from the terminal.
##   zenity               -- GUI prompt using zenity.
##   pinentry             -- GUI prompt using pinentry.
##
## Return:
##   0                    -- Success.
##   10                   -- Invalid argument(s).
##   11                   -- Unsupported vault backend.
##   12                   -- Vault is already unlocked.
subcommand:unlock() {
	local fwd_config_open=()
	local opt_prompt="pinentry"
	local args=()

	if [[ -t 0 ]]; then
		opt_prompt="stdin"
	fi

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--rcfile=*)        fwd_config_open+=("$1") ;;
			--prompt=stdin)    opt_prompt='stdin' ;;
			--prompt=zenity)   opt_prompt='zenity' ;;
			--prompt=pinentry) opt_prompt='pinentry' ;;
			-*) _vaulttools:cmderr "unknown argument: %s" "$1"; return 10 ;;
			*)  args+=("$1")
		esac
		shift
	done

	if [[ "${#args[@]}" -lt 1 ]]; then
		_vaulttools:cmderr "missing required positional argument 'vault_name'"
		return 10
	fi

	if [[ "${#args[@]}" -gt 2 ]]; then
		_vaulttools:cmderr "too many arguments"
		return 10
	fi

	# Get the vault config.
	local script
	script="$(vaults:config_get "${args[0]}")"

	eval "$script"
	eval "local name=\"\${${__vault_info_var__}[name]}\""

	# Check if the vault is already locked.
	if vaults:is_unlocked "$script"; then
		printf "%s is already unlocked.\n" "$name"
		return 1
	fi

	# Unlock the vault.
	local attempt password result
	result=''
	for attempt in {1..3}; do
		password="$(_vaulttools:prompt:"$opt_prompt" "$name" "$result")"
		if result="$(vaults:unlock "$script" <<<"$password" 2>&1)"; then
			return 0
		fi
	done

	# Unlocking failed. Print the final attempt's message.
	if [[ -t 2 ]]; then
		printf "\x1B[31m%s\x1B[m\n" "$result" 1>&2
	else
		printf "%s\n" "$result" 1>&2
	fi

	return 1
}

## <<doc:help:list>>
## $0 list: displays a table of all configured vaults
##
## <<doc:help:list:usage>>
## Synopsis:
##   $0 list [options] [column...]
##
## Options:
##   --rcfile=<path>  -- The config file to use.
##   --no-header      -- Skips printing the header.
##
## Columns:
##   name             -- The name of the vault.
##   mountpoint       -- The location of the unlocked vault.
##   source           -- The location of the encrypted vault data.
##   backend          -- The backend encryption program.
##
## Return:
##   0                -- Success
##   1                -- Could not parse the `plasmavaultrc` file.
##   10               -- Invalid argument(s).
subcommand:list() {
	local fwd_config_open=()
	local opt_columns=()
	local opt_header=true

	# Parse arguments.
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--rcfile=*)   fwd_config_open+=("$1") ;;
			--no-header)  opt_header=false ;;
			name)         opt_columns+=(name) ;;
			mountpoint)   opt_columns+=(mountpoint) ;;
			source)       opt_columns+=(source) ;;
			backend)      opt_columns+=(backend) ;;
			*) _vaulttools:cmderr "unknown argument: %s" "$1" ;;
		esac
		shift
	done

	if [[ "${#opt_columns[@]}" -eq 0 ]]; then
		opt_columns=(name backend mountpoint)
	fi

	# Parse the config file.
	local vaults=()
	local vault

	local script
    while read -r script; do
		vaults+=("$script")
    done < <(vaults:config_read vault "${fwd_config_open[@]}")

	# Calculate the column widths.
	declare -A col_widths
	local col
	for col in "${opt_columns[@]}"; do
		col_widths["$col"]="${#col}"
	done

	local value
	for script in "${vaults[@]}"; do
		eval "$script"
		for col in "${opt_columns[@]}"; do
			if [[ "${#vault[$col]}" -gt "${col_widths[$col]}" ]]; then
				col_widths[$col]="${#vault[$col]}"
			fi
		done
	done

	# Generate a script for quickly printing the requested fields.
	local printscript_pattern=''
	local printscript_args=''
	for col in "${opt_columns[@]}"; do
		printscript_pattern="${printscript_pattern}%-${col_widths[$col]}s  "
		printscript_args="${printscript_args} \"\${vault[$col]:-<null>}\""
	done
	local printscript="printf '${printscript_pattern}\n' ${printscript_args}"

	# Print the header.
	if "$opt_header" && [[ -t 1 ]]; then
		for col in "${opt_columns[@]}"; do
			vault[$col]="${col^^}"
		done

		printf "\x1B[1m"
		eval "$printscript"
		printf "\x1B[m"
	fi

	# Print the columns.
	for script in "${vaults[@]}"; do
		eval "$script"
		eval "$printscript"
	done
}


# -----------------------------------------------------------------------------
# Entrypoint.
# -----------------------------------------------------------------------------

## <<doc:info>>
## $0: a script for querying, locking, and unlocking KDE Plasma vaults
##
## <<!embed:subcommands>>
##
## Copyright:
##   This script is part of the `my-dotfiles` repository.
##   https://github.com/eth-p/my-dotfiles
##   Copyright (C) 2024 eth-p

## <<doc:subcommands>>
## Subcommands:
##   list    -- displays a table of all configured vaults
##   status  -- view the locked/unlocked status of a vault
##   lock    -- lock a vault
##   unlock  -- unlock a vault

## <<doc:features>>
## $0 feature tags
##
## Supported Features:
##   +lock +unlock +list +status
##
## Supported Prompts:
##   +prompt-stdin +prompt-zenity +prompt-pinentry
##
## Supported Backends:
##   +gocryptfs

# Parse arguments.
args=()
is_help=false
is_features=false

while [[ "$#" -gt 0 ]]; do
	case "$1" in
		--help)     is_help=true ;;
		--features) is_features=true ;;
		*)          args+=("$1") ;;
	esac
	shift
done

# If `--features` is provided, print a list of supported features.
if "$is_features"; then
	print_doc "features"
	exit 0
fi

# If there is no subcommand, print a list of available subcommands.
if [[ "${#args[@]}" -eq 0 ]]; then
	print_doc "info"
	exit 1
fi

# Handle the subcommand not existing.
if ! [[ "$(type -t "subcommand:${args[0]}")" = "function" ]]; then
	printf "%s: error, unknown subcommand '%s'\n\n" \
		"$(basename -- "$0")" \
		"${args[0]}"
	print_doc "subcommands"
	exit 1
fi

# If `--help` is provided, print the help doc instead of running the subcommand.
if "$is_help"; then
	print_doc "help:${args[0]}"
	exit 0
fi

# Run the subcommand.
PROGRAM_NAME="$(basename -- "$0") ${args[0]}"
"subcommand:${args[0]}" "${args[@]:1}"
exit $?
