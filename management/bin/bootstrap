#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2025 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
# ==============================================================================
set -euo pipefail
cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../.."
REPO_DIR="$(pwd)"
LIB_DIR="${REPO_DIR}/management/lib"
# ==============================================================================
source "management/lib/nix.sh"
source "management/lib/files.sh"
source "management/lib/print.sh"
source "management/lib/system.sh"

# ------------------------------------------------------------------------------
show_section "installing Nix package manager"
# ------------------------------------------------------------------------------

nix_install_script_url="https://nixos.org/nix/install"
nix_conf_file="/etc/nix/nix.conf"
nix_experimental_features="experimental-features = nix-command flakes"

if nix_installed &>/dev/null; then
	show_notice "nix is already installed"

else
	tempdir="$(mktemp -d)"
	_cleanup_file "$tempdir"

	curl -sSfL "$nix_install_script_url" -o "$tempdir/nix-install.sh"
	"$tempdir/nix-install.sh" --daemon
	PATH="$(nix_install_dir):${PATH}"
fi

# Ensure nix-command and flakes are enabled.
if grep -Fx "$nix_experimental_features" "$nix_conf_file" &>/dev/null; then
	show_notice "nix is already configured"

else
	show_notice "nix experimental features need enabling"
	sudo bash -c "$(printf 'printf "%%s\n" %q >>%q' "$nix_conf_file" "$nix_experimental_features")"
fi

# ------------------------------------------------------------------------------
show_section "bootstrapping configuration"
# ------------------------------------------------------------------------------

sys_arch="$(uname -m | sed 's/arm64/aarch64/')"
sys_os="$(uname -s | tr '[:upper:]' '[:lower:]')"

create_and_overwrite bootstrap.json <<EOF
{
  "username": "$(user_username)",
  "homeDirectory": "$(user_homedir)",
  "system": "$(nix_platform)",
  "repoDirectory": "${REPO_DIR}"
}
EOF

create_if_missing config.nix <<EOF
{ lib, pkgs, config, ... }:
{
  my-dotfiles.global = {
    nerdfonts = false;
    theme     = "dark";
  };

  # Fix locale errors when using programs installed through Nix. 
# home.language.base = "C.UTF-8";
# home.sessionVariables.LANG = "C.UTF-8";

  # Put device-specific config here.

  programs.git = {
    userName = "$(id -un)";
    userEmail = "$(id -un)@$(hostname)";
  };
}
EOF

create_if_missing config.profile <<<"minimal"

# ------------------------------------------------------------------------------
show_section "installing configuration"
# ------------------------------------------------------------------------------

profile="$(cat config.profile)"
show_notice "using profile '${profile}'"

nix run "$(home_manager_flake)" -- \
	switch --flake "path:.#${profile}"
