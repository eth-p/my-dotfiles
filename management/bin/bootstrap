#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2025 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
# ==============================================================================
set -euo pipefail
cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../.."
REPO_DIR="$(pwd)"
LIB_DIR="${REPO_DIR}/management/lib"
# ==============================================================================
source "management/lib/nix.sh"
source "management/lib/files.sh"
source "management/lib/print.sh"
source "management/lib/system.sh"

# ------------------------------------------------------------------------------
show_section "installing Nix package manager"
# ------------------------------------------------------------------------------

nix_install_script_url="https://nixos.org/nix/install"
nix_conf_file="/etc/nix/nix.conf"
nix_experimental_features="experimental-features = nix-command flakes"

if nix_installed &>/dev/null; then
	show_notice "nix is already installed"

else
	tempdir="$(mktemp -d)"
	_cleanup_file "$tempdir"

	curl -sSfL "$nix_install_script_url" -o "$tempdir/nix-install.sh"
	"$tempdir/nix-install.sh" --daemon
	PATH="$(nix_install_dir):${PATH}"
fi

# Ensure nix-command and flakes are enabled.
if grep -Fx "$nix_experimental_features" "$nix_conf_file" &>/dev/null; then
	show_notice "nix is already configured"

else
	show_notice "nix experimental features need enabling"
	sudo bash -c "$(printf 'printf "%%s\n" %q >>%q' "$nix_conf_file" "$nix_experimental_features")"
fi

# ------------------------------------------------------------------------------
show_section "bootstrapping system configuration"
# ------------------------------------------------------------------------------

BOOTSTRAPPED_FLAKE_DIR="$(mydotfiles_configdir)"

create_and_overwrite "${BOOTSTRAPPED_FLAKE_DIR}/flake.nix" <<EOF
# -- DO NOT EDIT --
# Autogenerated bootstrap.
{
  description = "Generated bootstrap for my-dotfiles.";

  inputs = {
    my-dotfiles = {
      url = "git+file:${REPO_DIR}";
    };
  };

  outputs = { self, my-dotfiles, ... }:
  let
    profile = builtins.fromJSON (builtins.readFile ./profile.json);
    bootstrap = {
      system = "$(nix_platform)";
      username = "$(user_username)";
      homeDirectory = "$(user_homedir)";
      repoDirectory = "${REPO_DIR}";
      bootstrapDirectory = "${BOOTSTRAPPED_FLAKE_DIR}";
    };
  in {
    homeConfigurations."\${bootstrap.username}" = my-dotfiles.lib.home.mkHomeConfiguration {
      inherit profile;
      system = bootstrap.system;
      modules = [
        ({pkgs, ...}: {
          home.username = bootstrap.username;
          home.homeDirectory = bootstrap.homeDirectory;
          home.stateVersion = "24.11";

          # Have home-manager install itself.
          home.packages = [
            pkgs.home-manager

            (import (my-dotfiles + "/management/package.nix") {
              inherit bootstrap pkgs;
            })
          ];
        })

        ./config.nix
      ];
    };
  };
}
EOF

create_if_missing "${BOOTSTRAPPED_FLAKE_DIR}/profile.json" <<EOF
"minimal"
EOF

create_if_missing "${BOOTSTRAPPED_FLAKE_DIR}/config.nix" <<EOF
{ lib, pkgs, config, ... }:
{
  # Hide home-manager news.
  news.display = "silent";

  # Fix locale errors when using programs installed through Nix.
#   home.language.base = "C.UTF-8";
#   home.sessionVariables.LANG = "C.UTF-8";

  # --------------------------------------------------------------------------
  # Extra packages:
  # --------------------------------------------------------------------------

  home.packages = [
#     pkgs.nixfmt-rfc-style
  ];

  # --------------------------------------------------------------------------
  # Global configuration:
  # --------------------------------------------------------------------------

  my-dotfiles.global = {
#     nerdfonts = true;
  };

  # --------------------------------------------------------------------------
  # Program configuration:
  # --------------------------------------------------------------------------

#   my-dotfiles.oh-my-posh = {
#     enable = true;
#   };

  programs.git = {
    userName = "$(user_username)";
    userEmail = "$(user_username)@$(hostname)";
  };
}
EOF

# ------------------------------------------------------------------------------
show_section "applying configuration"
# ------------------------------------------------------------------------------

source "${REPO_DIR}/management/bin/my-dotfiles"
