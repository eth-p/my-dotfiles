#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2021-2023 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
# =============================================================================
#
# Summary
# -------
#
#   A bash script that parses ANSI escape sequences and converts them into
#   tmux format codes. Reads from standard input and prints to standard output.
#
# Arguments
# ---------
#
#   $1  [--no-strip]    # Do not remove the actual ANSI sequences.
#
# How it's used in my-dotfiles
# ----------------------------
#
#   This is used to convert colors to tmux attributes when setting tmux
#   status line variables from within the shell.
#
# =============================================================================
set -euo pipefail

# -----------------------------------------------------------------------------
# Handle --strip:
# -----------------------------------------------------------------------------

if [[ "${1:-}" = "--no-strip" ]]; then
	printthru() {
		printf "\x1B%s" "$1"
	}
else
	printthru() {
		:
	}
fi

# -----------------------------------------------------------------------------
# Utilities:
# -----------------------------------------------------------------------------

# Converts the provided character to a character code.
# Does not work with NULL.
char_code() {
	LC_CTYPE=C printf '%d' "'$1"
}

# -----------------------------------------------------------------------------
# Parsing codes:
# -----------------------------------------------------------------------------

parse_escape_code() {
	local ch ch_ord
	read -rn1 ch
	ch_ord="$(char_code "$ch")"

	if [[ "$ch" = "[" ]]; then
		parse_code_csi "$ch"
	elif [[ "$ch" = "]" ]]; then
		parse_code_osc "$ch"
	elif [[ $ch_ord -ge 64 && $ch_ord -le 95 ]]; then
		parse_code_fe "$ch"
	elif [[ $ch_ord -ge 96 && $ch_ord -le 126 ]]; then
		parse_code_fs "$ch"
	elif [[ $ch_ord -ge 48 && $ch_ord -le 63 ]]; then
		parse_code_fp "$ch"
	elif [[ $ch_ord -ge 32 && $ch_ord -le 47 ]]; then
		parse_code_nf "$ch"
	else
		# ???
		printthru ""
	fi
}

# ESC <FE_BYTE>
#  * FE_BYTE in range [0x40:0x5F]
parse_code_fe() {
	printthru "$1"
}

# ESC <FS_BYTE>
#  * FS_BYTE in range [0x60:0x7E]
parse_code_fs() {
	printthru "$1"
}

# ESC <FP_BYTE>
#  * FP_BYTE in range [0x30:0x3F]
parse_code_fp() {
	printthru "$1"
}

# ESC <NF_BYTE> <NF_BYTE>* <NF_TERM>
#  * NF_BYTE in range [0x20:0x2F]
#  * NF_TERM in range [0x30:0x7E]
parse_code_nf() {
	local chars="$1"
	local ch ch_ord
	while read -rn1 ch; do
		ch_ord="$(char_code "$ch")"
		chars="${chars}{$ch}"

		if ! [[ $ch_ord -ge 32 && $ch_ord -le 47 ]]; then
			break
		fi
	done

	printthru "$chars"
}

# ESC <OSC_OPEN> <BYTE>* <OSC_TERM>
#  * OSC_OPEN is ']'
#  * OSC_TERM is '\a' (BEL) or 'ESC \'
parse_code_osc() {
	local chars="$1"
	local ch ch_ord last_ch
	while read -rn1 ch; do
		chars="${chars}{$ch}"
		if [[ "$ch" = $'\a' ]] || [[ "$ch" = "\\" && "$last_ch" = $'\x1B' ]]; then
			break
		fi

		last_ch="${ch}"
	done

	printthru "$chars"
}

# ESC <CSI_OPEN> <CSI_PARAM*> <CSI_INTER*> <CSI_TERM>
#  * CSI_OPEN is '['
#  * CSI_PARAM in range [0x30:0x3F]
#  * CSI_INTER in range [0x20:0x2F]
#  * CSI_TERM in range [0x40:0x7E]
parse_code_csi() {
	local chars="$1"
	local csi_params=""
	local csi_inters=""
	local csi_term=""
	local ch
	local ch_ord=-1

	# Start reading.
	read -rn1 ch
	ch_ord="$(char_code "$ch")"
	chars="${chars}${ch}"

	# Read parameters.
	while [[ "$ch_ord" -ge 48 && "$ch_ord" -le 63 ]]; do
		csi_params="${csi_params}${ch}"
		read -rn1 ch
		ch_ord="$(char_code "$ch")"
		chars="${chars}${ch}"
	done

	# Read intermediates.
	while [[ "$ch_ord" -ge 32 && "$ch_ord" -le 47 ]]; do
		csi_inters="${csi_inters}${ch}"
		read -rn1 ch
		ch_ord="$(char_code "$ch")"
		chars="${chars}${ch}"
	done

	cs_term="${ch}"

	# Print through the codes.
	printthru "$chars"

	# If it's a SGR code, handle it.
	if [[ "${cs_term}" = "m" ]]; then
		parse_sgr_loop "$csi_params" "$csi_inters"
	fi
}

# SGR attributes:
#   0                 -- reset
#   1                 -- bold
#   2                 -- dim
#   3                 -- italic
#   4                 -- underlined
#   7                 -- reversed
#   8                 -- concealed
#   9                 -- striked
#   21                -- double underlined
#   22                -- not bold or dim
#   23                -- not italic
#   24                -- not underlined
#   27                -- not reversed
#   28                -- not concealed
#   29                -- not striked
#   53                -- overlined
#   55                -- not overlined
#   30-37/39          -- foreground
#   38;5;<n>          -- foreground-256
#   38;2;<r>;<g>;<b>  -- foreground 24-bit
#   90-37/39          -- bright foreground
#   98;5;<n>          -- bright foreground-256
#   98;2;<r>;<g>;<b>  -- bright foreground 24-bit
#   40-47/49          -- background
#   48;5;<n>          -- background-256
#   48;2;<r>;<g>;<b>  -- background 24-bit
#   100-47/49         -- bright background
#   108;5;<n>         -- bright background-256
#   108;2;<r>;<g>;<b> -- bright background 24-bit
parse_sgr_loop() {
	printf "#["

	local params="$1;"
	local inters="$2"
	local seg seg2 cc cr cg cb
	while read -rd';' seg <<< "$params"; do
		params="${params: $(( ${#seg} + 1))}"
		if [[ -z "$seg" ]]; then seg="0"; fi
		case "$seg" in
			"0") printf ",none" ;;
			"1") printf ",bold" ;;
			"2") printf ",dim" ;;
			"3") printf ",italic" ;;
			"4") printf ",underscore" ;;
			"7") printf ",reverse" ;;
			"8") printf ",hidden" ;;
			"9") printf ",strikethrough" ;;
			"21") printf ",double-underscore" ;;
			"22") printf ",nodim,nobold" ;;
			"23") printf ",noitalic" ;;
			"24") printf ",underscore,nodouble-underscore" ;;
			"27") printf ",noreverse" ;;
			"28") printf ",nohidden" ;;
			"29") printf ",nostrikethrough" ;;
			"53") printf ",overline" ;;
			"55") printf ",nooverline" ;;
			38|48|98|108) {
				printf ","
				if [[ "$seg" = 38 ]];  then printf "fg="; fi
				if [[ "$seg" = 98 ]];  then printf "fg=bright"; fi
				if [[ "$seg" = 48 ]];  then printf "bg="; fi
				if [[ "$seg" = 108 ]]; then printf "bg=bright"; fi

				read -rd';' cc <<< "$params" || continue
				read -rd';' cr <<< "${params:$(( ${#cc} + 1 ))}" || continue
				case "$cc" in
					"5") {
						printf "color%s" "$cr"
						params="${params:$(( ${#cc} + ${#cr} + 2))}"
					};;
					"2") {
						read -rd';' cg <<< "${params:$(( ${#cc} + ${#cr} + 2 ))}" || continue
						read -rd';' cb <<< "${params:$(( ${#cc} + ${#cr} + ${#cg} + 3 ))}" || continue
						printf "#%02x%02x%02x" "$cr" "$cg" "$cb"
					};;
				esac
			};;
			3?)  printf "fg=%s" "$(color_index_to_name "${seg:1}")";;
			4?)  printf "bg=%s" "$(color_index_to_name "${seg:1}")";;
			9?)  printf "fg=bright%s" "$(color_index_to_name "${seg:1}")";;
			10?) printf "bg=bright%s" "$(color_index_to_name "${seg:2}")";;
		esac
	done
	printf "]"
}

color_index_to_name() {
	case "$1" in
		0) printf "black";;
		1) printf "red";;
		2) printf "green";;
		3) printf "yellow";;
		4) printf "blue";;
		5) printf "magenta";;
		6) printf "cyan";;
		7) printf "white";;
		9) printf "default";;
	esac
}

# -----------------------------------------------------------------------------
# Main Loop:
# -----------------------------------------------------------------------------

while IFS='' read -rd$'\x1B' text; do
	printf "%s" "$text"
	parse_escape_code
done
printf "%s" "$text"
