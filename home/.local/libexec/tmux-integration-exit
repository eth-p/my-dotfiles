#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2021 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
# =============================================================================
#
# Summary
# -------
#
#   This script will try to safely close the target tmux pane.
#
#   If any program in the shell's process hierarchy is not inside the
#   "$INTEGRATION_EXIT_SAFE_PROGRAM" list, the user will be prompted to kill
#   the pane. If the pane is killed, the pane process will be sent a SIGKILL
#   signal, and all oprhaned child processes will be reaped.
#
#   If all the process are inside the safe list however, the pane process
#   will be sent a SIGHUP signal to gracefully exit. If it does not exit
#   within $INTEGRATION_EXIT_SAFE_GRACE seconds, it will be forcefully killed.
#
#   Additionally, if the foreground program has a supported integration,
#   that will be used to exit the program instead.
#
#   Supported programs:
#
#    - vim (and neovim)
#
# Arguments
# ---------
#
#   $1  [--config=CONFIG_FILE]    # Optional config file.
#   $1  "--!"                     # Attestation constant.
#   $2  TMUX_SOCKET               # Path to the tmux socket.
#   $3  TMUX_PANE                 # The target tmux pane.
#   $4  TMUX_CURRENT_COMMAND      # The current command running in the pane.
#   $5  TMUX_CURRENT_TITLE        # The current title of the pane.
#
# How it's used in my-dotfiles
# ----------------------------
#
#   This is used by tmux's `C-a x` binding to close the active pane.
#   It's also indirectly used by Cmd+W in Alacritty, which sends `C-a x`.
# =============================================================================
set -euo pipefail

INTEGRATION_EXIT_VIM_BINDING=("Escape" "Escape" ":q" "Enter")
INTEGRATION_EXIT_SAFE_GRACE=5
INTEGRATION_EXIT_SAFE_PROGRAMS=(
	'-*' fish ssh
	"$(basename -- "$SHELL")"
)

if [[ "$1" =~ --config=(.*) ]]; then
	source "${BASH_REMATCH[1]}"
	shift
fi


# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------

# Recursively prints the names of children commands.
#   $1  - The parent pid.
#   $2  - The pid to stop at.
CACHED_PS="$(ps ax -o pid,ppid,comm)"
children() {
	if [ "$1" = "$2" ]; then
		return 0
	fi

	local command_pid
	local command
	while read -r command_pid command; do
		echo "$command"
		children "$command_pid" "$2"
	done < <(awk '$2 == '"$1"' { print $1" "$3 }' <<< "$CACHED_PS")
}


# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

# Attest that it's run from inside tmux.
if [ "$1" != "--!" ]; then
	echo "$0: this script isn't meant to be run directly"
	exit 1
fi

# Collect arguments.
export TMUX="$2"
export TMUX_PANE="$3"
PANE_CURRENT_COMMAND="$4"
PANE_CURRENT_TITLE="$5"
PANE_COMMAND_NAME="$(basename -- "$PANE_CURRENT_COMMAND")"
TITLE_COMMAND_NAME="$(basename -- "$(cut -d' ' -f1 <<< "$PANE_CURRENT_TITLE")")"

# In a supported program? Copy using the program's features.
for command_name in "$PANE_COMMAND_NAME" "$TITLE_COMMAND_NAME"; do
case "$command_name" in
	vi|vim|nvim|neovim)
		if [[ "${#INTEGRATION_EXIT_VIM_BINDING[@]}" -ne 0 ]]; then
			tmux send-keys -t "$TMUX_PANE" "${INTEGRATION_EXIT_VIM_BINDING[@]}"
			exit 0
		fi
		break;;
	
	ranger)
		tmux send-keys -t "$TMUX_PANE" "C-c"
		sleep 0.05
		tmux send-keys -t "$TMUX_PANE" "q"
		exit 0
esac
done

# Get the pane shell's PID.
pane_pid="$(tmux display-message -p -F "#{pane_pid}" -t"$TMUX_PANE")"

# Find all its children.
# If a single one of them isn't allowed, we need to ask.
need_prompt=false
need_prompt_command=""
while read -r child; do
	for allowed_command in "${INTEGRATION_EXIT_SAFE_PROGRAMS[@]}"; do
		if [[ "$(basename -- "$child")" = $allowed_command ]]; then
			continue 2
		fi
	done

	need_prompt=true
	need_prompt_command="$(basename -- "$child")"
	break
done < <(children "$pane_pid" "$$")

# Was there any unsafe program?
# If so, prompt the user about killing the pane.
if "$need_prompt"; then
	tmux confirm-before \
		-p "Pane is running '$need_prompt_command'. Close it?" \
		"kill-pane -t '$TMUX_PANE'"
	exit 0
fi

# Otherwise, no prompt needed.
# Try to safely kill it first, then force kill it in 5 seconds.
if [[ -n "$INTEGRATION_EXIT_SAFE_GRACE" ]] && 
	[[ "$INTEGRATION_EXIT_SAFE_GRACE" -gt 0 ]]; then
	pane_pid="$(tmux display-message -t "$TMUX_PANE" -p '#{pane_pid}')"

	# Kill the pane with SIGHUP.
	kill -1 "$pane_pid"

	# Hide the pane for UX.
	tmux break-pane -s "$TMUX_PANE" -d

	# Wait for it to exit.
	timer=0
	while [[ "$timer" -lt "$INTEGRATION_EXIT_SAFE_GRACE" ]]; do
		timer="$((timer + 1))"
		sleep 1
		if ! kill -0 "$pane_pid"; then
			tmux kill-pane -t "$TMUX_PANE" || true &>/dev/null	
			exit 0
		fi
	done
fi

# Force kill the pane.
tmux kill-pane -t "$TMUX_PANE"
exit 0

