#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2021 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
set -euo pipefail

# tmux-integration-exit
# Arguments:
#   [--config=CONFIG_FILE]
#   "--!"
#   TMUX_SOCKET
#   TMUX_PANE
#   TMUX_CURRENT_COMMAND
#   TMUX_CURRENT_TITLE
#
# This script will try to exit supported editors.
# For unsupported programs, it will prompt the user to kill the pane.

# -----------------------------------------------------------------------------
# Config:

INTEGRATION_EXIT_VIM_BINDING=("Escape" "Escape" ":q" "Enter")
INTEGRATION_EXIT_SAFE_PROGRAMS=(
	'-*' fish ssh
	"$(basename -- "$SHELL")"
)

if [[ "$1" =~ --config=(.*) ]]; then
	source "${BASH_REMATCH[1]}"
	shift
fi


# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------

# Recursively prints the names of children commands.
#   $1  - The parent pid.
#   $2  - The pid to stop at.
CACHED_PS="$(ps ax -o pid,ppid,comm)"
children() {
	if [ "$1" = "$2" ]; then
		return 0
	fi

	local command_pid
	local command
	while read -r command_pid command; do
		echo "$command"
		children "$command_pid" "$2"
	done < <(awk '$2 == '"$1"' { print $1" "$3 }' <<< "$CACHED_PS")
}


# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

# Attest that it's run from inside tmux.
if [ "$1" != "--!" ]; then
	echo "$0: this script isn't meant to be run directly"
	exit 1
fi

# Collect arguments.
export TMUX="$2"
export TMUX_PANE="$3"
PANE_CURRENT_COMMAND="$4"
PANE_CURRENT_TITLE="$5"
PANE_COMMAND_NAME="$(basename -- "$PANE_CURRENT_COMMAND")"
TITLE_COMMAND_NAME="$(basename -- "$(cut -d' ' -f1 <<< "$PANE_CURRENT_TITLE")")"

# In a supported program? Copy using the program's features.
for command_name in "$PANE_COMMAND_NAME" "$TITLE_COMMAND_NAME"; do
case "$command_name" in
	vi|vim|nvim|neovim)
		if [[ "${#INTEGRATION_EXIT_VIM_BINDING[@]}" -ne 0 ]]; then
			tmux send-keys -t "$TMUX_PANE" "${INTEGRATION_EXIT_VIM_BINDING[@]}"
			exit 0
		fi
		break;;
esac
done

# Get the pane shell's PID.
pane_pid="$(tmux display-message -p -F "#{pane_pid}" -t"$TMUX_PANE")"

# Find all its children.
# If a single one of them isn't allowed, we need to ask.
need_prompt=false
need_prompt_command=""
while read -r child; do
	for allowed_command in "${INTEGRATION_EXIT_SAFE_PROGRAMS[@]}"; do
		if [[ "$(basename -- "$child")" = $allowed_command ]]; then
			continue 2
		fi
	done

	need_prompt=true
	need_prompt_command="$(basename -- "$child")"
	break
done < <(children "$pane_pid" "$$")

# Was there any unsafe program?
# If so, prompt the user about killing the pane.
if "$need_prompt"; then
	tmux confirm-before \
		-p "Pane is running '$need_prompt_command'. Close it?" \
		"kill-pane -t '$TMUX_PANE'"
	exit 0
fi

# Otherwise, no prompt needed.
tmux kill-pane -t "$TMUX_PANE"
exit 0

