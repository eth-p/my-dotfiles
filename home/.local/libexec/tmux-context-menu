#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2021 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
# =============================================================================
#
# Summary
# -------
#   
#   This script will make an educated guess on what foreground program is
#   running, and generate a context menu for tmux to present to the user.
#
#   Supported programs:
#
#    - fish
#    - vim (and neovim)
#    - ranger
#
# Arguments
# ---------
#
#   $1  [--config=CONFIG_FILE]    # Optional config file.
#   $1  "--!"                     # Attestation constant.
#   $2  TMUX_SOCKET               # Path to the tmux socket.
#   $3  TMUX_PANE                 # The target tmux pane.
#   $4  POPUP_TYPE                # The popup type.
#   $5  POPUP_TRIGGER             # What triggered the popup.
#   $6  POPUP_MOUSE_X             # The x coordinate of the popup.
#   $7  POPUP_MOUSE_Y             # The y coordinate of the popup.
#   $8  COMMAND_NAME              # The current command running in the pane.
#   $9  COMMAND_TITLE             # The current title of the pane.
#
# How it's used in my-dotfiles
# ----------------------------
#
#   This script generates the C-x menu and right-click context menu.
#   Due to tmux limitations, the right-click context menu can't actually
#   be clicked on, however.
#
# =============================================================================
set -eou pipefail

INTEGRATION_OPEN_FISH_BINDING=()
CONTEXT_MENU_IGNORED_PROGRAMS=()

if [[ "$1" =~ --config=(.*) ]]; then
	source "${BASH_REMATCH[1]}"
	shift
fi


# -----------------------------------------------------------------------------
# Context Menu
# -----------------------------------------------------------------------------

popup_pane() {

	# Pane swapping.
	popup_item "Swap Up"    u "swap-pane -t '${TMUX_PANE}' -U"
	popup_item "Swap Down"  d "swap-pane -t '${TMUX_PANE}' -D"
	popup_item "#{?pane_marked_set,,-}Swap Marked" s "swap-pane -t '${TMUX_PANE}'"
	popup_item "Zoom" z "resize-pane -t '${TMUX_PANE}' -Z"
	popup_item "#{?pane_marked,Unmark,Mark}" m "select-pane -t '${TMUX_PANE}' -m"

	# Program-specific items.
	for command_name in "$PANE_COMMAND_NAME" "$TITLE_COMMAND_NAME"; do
	case "$command_name" in
		vi|vim|nvim|neovim)
			popup_separator
			popup_header "$command_name"
			popup_item "Undo" "C-z" "$(tmux_send_keys Escape Escape u)"
			popup_item "Redo" "C-y" "$(tmux_send_keys Escape Escape C-r)" 
			popup_item "Save" "C-s" "$(tmux_send_keys Escape Escape :w Enter)"
			if $GIT_REPO; then
				popup_item "Previous Conflict" "[" "$(tmux_send_keys Escape Escape :ConflictMarkerPrevHunk Enter)"
				popup_item "Next Conflict" "]" "$(tmux_send_keys Escape Escape :ConflictMarkerNextHunk Enter)"
			fi
			break;;

		fish)
			popup_separator
			popup_header "$command_name"
			if [[ "${#INTEGRATION_OPEN_FISH_BINDING[@]}" -gt 0 ]]; then
				popup_item "Change Directory" "c" "$(tmux_send_keys "${INTEGRATION_OPEN_FISH_BINDING[@]}")"
			fi
			break;;

		ranger)
			popup_separator
			popup_header "$command_name"
			popup_item "Hidden Files" "h" "$(tmux_send_keys C-h)"
			break;;
	esac
	done

	# Pane control.
	popup_separator
	popup_item "Clear Pane" "C-k" "run-shell -t '${TMUX_PANE}' \"bash '$HOME/.local/libexec/tmux-clear-pane' '--!' '$TMUX' '#D' '#{pane_current_command}'\""
	popup_item "Kill Pane" "" "run-shell -t '${TMUX_PANE}' \"bash '$HOME/.local/libexec/tmux-close-pane' '--!' '$TMUX' '#D' '#{pane_current_command}'\""

	# Extra.
	popup_separator
	popup_item "Send Ctrl+X" "C-x" "$(tmux_send_keys C-x)"
}


# -----------------------------------------------------------------------------
# Util: Popup Generation
# -----------------------------------------------------------------------------

# Adds an item to the popup menu.
# Arguments:
#   $1  - The item name.
#   $2  - The item sequence.
#   $3  - The command to run when the item is selected.
#   $4  - If "disabled", sets the item to disabled.
popup_item() {
	local name="$1"
	if [[ "$#" -gt 3 ]] && [[ "$4" = "disabled" ]]; then
		name="-$name"
	fi

	POPUP_ARGS+=("$name" "$2" "$3")
	POPUP_ITEMS=$((POPUP_ITEMS+1)) || true
}

# Adds a header to the popup menu.
# Arguments:
#   $1  - The header name.
popup_header() {
	popup_item "#[fg=colour147, bold]$1" "" "" disabled
}

# Adds a separator to the popup menu.
popup_separator() {
	POPUP_ARGS+=("")
	POPUP_ITEMS=$((POPUP_ITEMS+1)) || true
}

# A popup item command for sending keys to the relevant pane.
tmux_send_keys() {
	printf "send-keys -t '%s' " "${TMUX_PANE}"
	printf '%q ' "$@"
}


# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

# Attest that it's run from inside tmux.
if [ "$1" != "--!" ]; then
	echo "$0: this script isn't meant to be run directly"
	exit 1
fi

# Collect arguments.
export TMUX="$2"
export TMUX_PANE="$3"
POPUP_TYPE="$4"
POPUP_TRIGGER="$5"
POPUP_MOUSE_X="$6"
POPUP_MOUSE_Y="$7"
PANE_CURRENT_COMMAND="$8"
PANE_CURRENT_TITLE="$9"
PANE_COMMAND_NAME="$(basename -- "$PANE_CURRENT_COMMAND")"
TITLE_COMMAND_NAME="$(basename -- "$(cut -d' ' -f1 <<< "$PANE_CURRENT_TITLE")")"

# Handle special cases for different triggers.
case "$POPUP_TRIGGER" in
	bind)
		pop_y="$((POPUP_MOUSE_Y))"

		# Passthrough for ignored programs programs.
		for test_command in "$TITLE_COMMAND_NAME" "$PANE_COMMAND_NAME"; do
		for ignored_program in "${CONTEXT_MENU_IGNORED_PROGRAMS[@]}"; do
			if [[ "$PANE_CURRENT_COMMAND_NAME" =~ $ignored_program ]]; then
				tmux send-keys -t "$TMUX_PANE" C-X
				exit 0
			fi
		done
		done
		;;
	
	mouse)
		sleep 0.075
		;;
esac

# Check if running inside a git repo.
GIT_REPO=false
GIT_DIR=
if command -v git &>/dev/null && GIT_DIR="$(git rev-parse --show-toplevel 2>/dev/null)"; then
	GIT_REPO=true
fi

# Generate the popup.
POPUP_ARGS=()
POPUP_ITEMS=0

"popup_${POPUP_TYPE}" || exit $?
case "$POPUP_TYPE" in
	pane)
		pop_x="$((POPUP_MOUSE_X))"
		pop_y="$((POPUP_MOUSE_Y+3+POPUP_ITEMS))"
		;;
esac

# Display the popup
tmux display-menu -t "$TMUX_PANE" \
	-T "#[align=centre] Pane #{pane_id} | ${TITLE_COMMAND_NAME:-$PANE_COMMAND_NAME} " \
	-x "${pop_x}" -y "${pop_y}" \
	"${POPUP_ARGS[@]}"
exit $?

