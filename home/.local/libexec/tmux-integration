#!/usr/bin/env bash
# my-dotfiles | Copyright (C) 2022 eth-p
# Repository: https://github.com/eth-p/my-dotfiles
# =============================================================================
#
# Summary
# -------
#
#   This script runs a tmux integration script.
#
#   If the current program supports the specified integration, the first
#   available integration script will be executed.
#
# Arguments
# ---------
#
#   $1  INTEGRATION_NAME          # The name of the integration to run.
#
# Environment
# -----------
#
#   $ETHP_TMUX_PANE               # The tmux pane to operate on.
#   $ETHP_TMUX_PANE_COMMAND       # The command string of the pane.
#   $ETHP_TMUX_PANE_TITLE         # The title of the pane.
#   $ETHP_TMUX_PANE_PWD           # The working directory of the pane.
#   $ETHP_INTEGRATIONS_PATH       # Paths to locate integration scripts.
#   $ETHP_INTEGRATIONS_CONFIGS    # Directory containing integration configs.
#
# How it's used in my-dotfiles
# ----------------------------
#
#   When an integration needs to be run by `tmux`, it will call this script
#   via `run-shell` with the above environment variables provided. Any
#   missing variables will be read from the active tmux session.
#
#   Determining the current program:
#     
#     To determine the current program, the pane title will be parsed as a
#     shell word list. The basename of the first argument in this word list
#     will be used as the program name.
#
#     IT IS RECOMMENDED TO CONFIGURE YOUR SHELL TO SET THE TITLE TO THE
#     CURRENTLY-EXECUTING COMMAND.
#
#   Finding integration scripts:
#
#     Integration scripts will be searched for in the directories provided by
#     the `$ETHP_INTEGRATION_PATH` environment variable. If not provided, this
#     defaults to `~/.config/tmux/integrations`. The search order is finding
#     an integration script matching the exact name from first to last in the
#     path, or else a `_default.sh` script from first to last in the path.
#
#     Example:     
#      - my-integrations/close/nvim.sh
#      - other-integrations/close/nvim.sh
#      - my-integrations/close/_default.sh
#      - other-integrations/close/_default.sh
#
# Features available to integrations
# ----------------------------------
#
#   Commands:
#     
#     `keys: [key] [key] [key]`      # Sends a key to the tmux pane.
#     `:option: [name] [value]`      # Declares an option for an integration.
#     `:option: -a [name] [v1] [v2]  # Declares an array option.
#
#   Variables:
#
#      `$INTEGRATION_PROGRAM`    # The foreground program in the tmux pane.
#      `$INTEGRATION_PANE`       # The target tmux pane.
#
# =============================================================================
set -euo pipefail


# -----------------------------------------------------------------------------
# Default Configuration:
# These can be overridden in an integration config file.
# -----------------------------------------------------------------------------

INTEGRATION_ERROR_STYLE="bg=red fg=black"

INTEGRATION_CONTEXT_MENU_HEADER_STYLE="fg=colour147, bold"
INTEGRATION_CONTEXT_MENU_PASSTHROUGH_NAME="Ctrl+X"
INTEGRATION_CONTEXT_MENU_PASSTHROUGH_BIND="C-x"


# -----------------------------------------------------------------------------
# Error Handling:
# Execute the script within a subshell to capture and print any errors.
# -----------------------------------------------------------------------------

if [ "${__ETHP_TMUX_INTEGRATION_WRAPPED:-}" != "WRAPPED" ]; then
	messages=''
	exitcode=
	
	# Strip the leading and trailing spaces from the integration name.
	integration="${1:-}"
	integration="${integration#"${integration%%[![:space:]]*}"}"
	integration="${integration%"${integration##*[![:space:]]}"}"

	# Create an array of the arguments to execute under the wrapper.
	execute=("$0" "$integration")
	if [ $# -gt 1 ]; then
		execute+=("${@:2}")
	fi

	# If the integration starts with "script:", treat it as a simple script.
	# This means that the script is invoked directly without any preparation.
	if [ "${integration:0:7}" = "script:" ]; then
		execute=("${integration:7}")
		integration="script:"

		if [ $# -gt 1 ]; then
			execute+=("${@:2}")
		fi
	fi

	# Run the script and store its output in a variable.
	while read -r line; do
		case "$line" in
			">"*) messages+="${line:1}"$'\n' ;;
			"="*) exitcode="${line:1}" ;;
		esac
	done < <({
		set +e
		__ETHP_TMUX_INTEGRATION_WRAPPED=WRAPPED "${execute[@]}" 2>&1 | sed 's/^/>/'
		printf "\n=%d\n" "$?"
	})

	# Display a message containing the output of the integration script.
	popup_display=false
	popup_style=
	popup_title=

	if [ -n "${ETHP_INTEGRATIONS_DEBUG:-}" ] \
		&& [ "${ETHP_INTEGRATIONS_DEBUG:-}" = "$integration" ]
	then
		popup_display=true
		popup_style="fg=green"
		popup_title=" Integration "
	fi

	if [ "$exitcode" -ne 0 ]; then
		popup_display=true
		popup_style="fg=red"
		popup_title=" Integration Failed "
	fi

	if "$popup_display"; then
		tempfile="$(mktemp)"
		trap 'rm "$tempfile"' EXIT
		cat <<< "$messages" >"$tempfile"

		# shellcheck disable=SC2016
		tmux display-popup -E \
			-T "$popup_title" \
			-S "$popup_style" \
			sh -c 'less -LKR --tilde "$1" || true' -- "$tempfile"
	fi

	exit 0
fi


# -----------------------------------------------------------------------------
# Setup:
# -----------------------------------------------------------------------------

# Set up the environment for loading and configuring integrations. 
ETHP_INTEGRATIONS_PATH="${ETHP_INTEGRATIONS_PATH:-${XDG_CONFIG_HOME:-${HOME}/.config}/tmux/integrations}"
ETHP_INTEGRATIONS_CONFIGS="${ETHP_INTEGRATIONS_CONFIGS:-${XDG_CONFIG_HOME:-${HOME}/.config}/tmux/integrations-conf.d}"

# Get information from tmux.
ETHP_TMUX_PANE="${ETHP_TMUX_PANE:-$(tmux display-message -p '#{pane_id}')}"
ETHP_TMUX_PANE_COMMAND="${ETHP_TMUX_PANE_COMMAND:-$(tmux display-message -p -t "${ETHP_TMUX_PANE}" '#{pane_current_command}')}"
ETHP_TMUX_PANE_TITLE="${ETHP_TMUX_PANE_TITLE:-$(tmux display-message -p -t "${ETHP_TMUX_PANE}" '#{pane_title}')}"
ETHP_TMUX_PANE_PWD="${ETHP_TMUX_PANE_PWD:-$(tmux display-message -p -t "${ETHP_TMUX_PANE}" '#{pane_current_path}')}"

# Function: splitargs
# Split a command string into arguments.
#
# Arguments:
#   $1  -- The target variable.
#   $2  -- The command string to split.
splitargs() {
	local target="$1"
	local string="$2"

	local __buffer=
	local __is_quote=
	local __is_escape=false
	while IFS= read -rn1 char; do

		# Append escaped characters directly.
		if $__is_escape; then
			__buffer+="${char}"
			__is_escape=false
			continue
		fi

		# If the character is a space, split the word if it's not quoted.
		case "$char" in
			"$__is_quote") __is_quote='' ;;
			\\) __is_escape=true ;;
			'"') __is_quote='"' ;;
			"'") __is_quote="'" ;;
			" ") {
				if [ -n "$__is_quote" ]; then
					__buffer+="$char"
					continue
				fi

				eval "$target+=(\"\$__buffer\")"
				__buffer=''
				continue;
			} ;;
			*)  __buffer+="$char" ;;
		esac
	done <<< "$string"

	# If the buffer is not empty, append it.
	if [ "${#__buffer}" -gt 0 ]; then
		eval "$target+=(\"\$__buffer\")"
	fi
}

# Parse what program is running.
ETHP_TMUX_COMMAND=()
splitargs ETHP_TMUX_COMMAND "$ETHP_TMUX_PANE_TITLE"


# -----------------------------------------------------------------------------
# Integration Loading:
# -----------------------------------------------------------------------------

# Determine the integration to run.
INTEGRATION_NAME="${1?Integration name must be provided}"
INTEGRATION_PROGRAM="$(basename -- "${ETHP_TMUX_COMMAND[0]}")"
INTEGRATION_SCRIPT=''
INTEGRATION_PANE="${ETHP_TMUX_PANE}"
__integration_script_candidates=()

# If the integration is "context-menu", set a variable for later.
__integration_is_contextmenu=false
if [[ "$INTEGRATION_NAME" = "context-menu" ]]; then
	__integration_is_contextmenu=true
fi

# Look for configuration scripts.
# These are executed here to allow for the scripts to be modified.
__integration_config_files=("$ETHP_INTEGRATIONS_CONFIGS"/*.sh)
if [ "${__integration_config_files[0]}" = "${ETHP_INTEGRATIONS_CONFIGS}/*.sh" ]; then
	__integration_config_files=()
fi

for __path in "${__integration_config_files[@]}"; do
	# shellcheck disable=SC1090
	source "$__path"
done

# Look for integration scripts within the integrations path.
if [ -z "${INTEGRATION_SCRIPT}" ]; then

	# Add candidates for the exact program name.
	while read -r -d':' __path; do
		if [ -n "$__path" ]; then
			__integration_script_candidates+=("${__path}/${INTEGRATION_NAME}/${INTEGRATION_PROGRAM}.sh")
		fi
	done <<< "${ETHP_INTEGRATIONS_PATH}:"

	# Add candidates for the default handler.
	while read -r -d':' __path; do
		if [ -n "$__path" ]; then
			__integration_script_candidates+=("${__path}/${INTEGRATION_NAME}/_default.sh")
		fi
	done <<< "${ETHP_INTEGRATIONS_PATH}:"

	# Select the first one found.
	for __integration_script in "${__integration_script_candidates[@]}"; do
		if [ -f "$__integration_script" ]; then
			INTEGRATION_SCRIPT="$__integration_script"
			break
		fi
	done

fi


# -----------------------------------------------------------------------------
# Debug:
# -----------------------------------------------------------------------------

# Print debug info.
printf "\x1B[33mIntegration debug info:\x1B[0m\n"
if [ "${#__integration_config_files[@]}" -gt 0 ]; then
	printf "\x1B[33mConfig files:\x1B[0m\n"
	printf "   - %s\n" "${__integration_config_files[@]}"
	printf "\n"
fi

printf "\x1B[33m%-15s\x1B[0m %s\n" \
	"* Pane ID:"     "$ETHP_TMUX_PANE" \
	"* Pane Path:"   "$ETHP_TMUX_PANE_PWD" \
	"* Integration:" "$INTEGRATION_NAME" \
	"* Program:"     "$INTEGRATION_PROGRAM" \
	"  Script:"      "${INTEGRATION_SCRIPT+(none)}" \


printf "\x1B[33m-----\x1B[0m\n"


# -----------------------------------------------------------------------------
# Internal Functions:
# These are used internally and should not be used by integrations.
# -----------------------------------------------------------------------------

# Get the tmux `display-time` option in a `sleep`-friendly value.
# This is the value that determines how long `display-message` is shown for.
__ethp_get_tmux_display_time() {
	local scope
	local delay

	# Get the tmux `display-time` option.
	for scope in '' -w -g -s; do
		if delay="$(tmux show-options -v $scope display-time)" && [ -n "$delay" ]; then
			break
		fi
	done 2>/dev/null

	# If there isn't a display time, use the default of `0.75s`.
	if [ -z "$delay" ]; then
		delay=750
	fi

	# Add `0.25s` to the display time.
	delay="$((delay + 250))"

	# If `$1` is "ms", print the milliseconds.
	if [ "${1:-s}" = "ms" ]; then
		echo "$delay"
		return 0
	fi
	
	# Calculate a `sleep` friendly value.
	# This is needed for the modified style to persist.
	local secs="$((delay / 1000))"
	local msecs="0000$((delay % 1000))"
	msecs="${msecs:(-4)}"

	echo "${secs}.${msecs}"
}


# -----------------------------------------------------------------------------
# Library Functions:
# These are intended to be used within integrations.
# -----------------------------------------------------------------------------

# Function: :nothing:
#
# Do nothing. This is for integrations that should intentionally prevent the
# behaviour of the `_default.sh` fallback script.
:nothing:() { :; }

# Function: :option:
#
# Declare a configurable option.
# If not already set by a config file, the provided values are used as defaults.
# 
# Arguments:
#   $1  -- The option name.
#   ... -- The option value(s).
#
:option:() {
	local is_array=false

	if [ "$1" = "-a" ]; then
		is_array=true
		shift
	fi

	local option_name="${1}"
	local option_defaults=("${@:2}")

	# If it's not set, set the defaults.
	if ! declare -p "$option_name" &>/dev/null; then
		if "$is_array"; then
			declare -ga "$option_name"
			eval "$option_name"='( "${option_defaults[@]}" )'
		else
			declare -g "$option_name"="${option_defaults[*]}"
		fi
	fi
}

# Function: error:
#
# Display an error message in the tmux message line.
# This uses the $INTEGRATION_ERROR_STYLE style for the error message.
#
# Arguments:
#   $1  -- The message to display.
#
error:() {
	# Get the old message style and set the new one.
	local message_style
	message_style="$(tmux show-options -v message-style)"
	tmux set-option message-style "$INTEGRATION_ERROR_STYLE" || true

	# Display the message.
	tmux display-message -F "$1" || true
	sleep "$(__ethp_get_tmux_display_time s)" || true
	
	# Reset the message style.
	# If it was unset before, remove it. If it was set, set it to previous value.
	if [ -z "$message_style" ]; then
		tmux set-option -u message-style
	else
		tmux set-option message-style "$message_style"
	fi
}

keys:() {
	tmux send-keys -t "$INTEGRATION_PANE" "$@"
}


# -----------------------------------------------------------------------------
# Context Menu Functions:
# These are intended to be used within the context-menu integration.
# -----------------------------------------------------------------------------

if "$__integration_is_contextmenu"; then
	__menu_section='static'

	__menu_section_defaults=()
	__menu_section_defaults_size=0

	__menu_section_program=()
	__menu_section_program_size=0

	__menu_section_static=()
	__menu_section_static_size=0

	__write_to_menu_section() {
		eval "__menu_section_${1}"+='("${@:2}")'
		eval "(( __menu_section_${1}_size++ )) || true"
	}

	# Function: menu:item
	# Add a new item to the context menu.
	#
	# Arguments:
	#   $1  -- The name of the item.
	#   $2  -- The tmux action that will be executed if the item is selected.
	#
	menu:item() {
		local name action opt_disabled=false opt_key='' argv
		while [ $# -gt 0 ]; do
			case "$1" in
				--disabled) opt_disabled=true ;;
				--key=*)    opt_key="${1:(6)}" ;;
				--key)      opt_key="$2" ;;
				-*)         echo "unknown menu item option: $1"; return 1;;
				*)          argv+=("$1") ;;
			esac
			shift
		done

		name="${argv[0]}"
		action="${argv[1]}"

		if "$opt_disabled"; then
			name="-${name}"
		fi

		printf " * %-20s %s\n" "$name" "(from: ${BASH_SOURCE[0]##*/})"
		__write_to_menu_section \
			"$__menu_section" \
			"$name" "$opt_key" \
			"$action"
	}

	# Function: menu:header
	# Adds a header to the current context menu section.
	#
	# Arguments:
	#   $1  -- The header text.
	menu:header() {
		__write_to_menu_section \
			"$__menu_section" \
			"-#[${INTEGRATION_CONTEXT_MENU_HEADER_STYLE}]${1}" "" \
			""
	}

	# Function: menu:separator
	# Adds a separator to the current context menu section.
	menu:separator() {
		__write_to_menu_section "$__menu_section" ""
	}

	# Function: :keys:
	# (when used in a context menu)
	#
	# Generates a send-keys action for a context menu item.
	keys:() {
		printf "send-keys -t '%s' " "$INTEGRATION_PANE"
		printf '%q ' "$@"
	}

	# Function: :keys:
	# (when used in a context menu)
	#
	# Generates a run-shell integration action for a context menu item.
	integration:() {
		printf "run-shell -t '%s' '" "$INTEGRATION_PANE"

		# Add environment variables.
		printf "%s=%q " \
			ETHP_TMUX_PANE "$INTEGRATION_PANE" \
			ETHP_INTEGRATIONS_PATH "$ETHP_INTEGRATIONS_PATH" \
			ETHP_INTEGRATIONS_CONFIGS "$ETHP_INTEGRATIONS_CONFIGS"

		# Add the script and its arguments.
		printf "%q " "${BASH_SOURCE[0]}" "$@"
		printf "'\n"
	}
fi

# Add the static context menu arguments.
if "$__integration_is_contextmenu"; then
	menu:item "Clear Pane" --key="C-k" "$(integration: clear)"
	menu:item "Kill Pane" "$(integration: exit)"
	menu:separator
	menu:item "Send ${INTEGRATION_CONTEXT_MENU_PASSTHROUGH_NAME}" \
		--key="${INTEGRATION_CONTEXT_MENU_PASSTHROUGH_BIND}" \
		"$(keys: "${INTEGRATION_CONTEXT_MENU_PASSTHROUGH_BIND}")"
fi

# -----------------------------------------------------------------------------
# Run:
# -----------------------------------------------------------------------------

# If there is no integration script, exit.
if [ -z "$INTEGRATION_SCRIPT" ] && ! "$__integration_is_contextmenu"; then
	echo "Could not find a suitable integration."
	echo "Possible candidates:"
	printf " * %s\n" "${__integration_script_candidates[@]}"

	error: "#[bold]Error:#[default] No available integration to ${INTEGRATION_NAME} ${INTEGRATION_PROGRAM}."
	exit 0
fi

# Clean private variables.
unset __integration_script
unset __integration_config_files
unset __ETHP_TMUX_INTEGRATION_WRAPPED
unset ETHP_TMUX_PANE
unset ETHP_TMUX_PANE_COMMAND
unset ETHP_TMUX_PANE_TITLE
unset ETHP_TMUX_PANE_PWD

# Export public variables.
export INTEGRATION_NAME
export INTEGRATION_SCRIPT
export INTEGRATION_PROGRAM
export INTEGRATION_PANE
export INTEGRATION_DIR

# If the integration is a context menu, apply special logic to load all items.
# shellcheck disable=SC2030
if "$__integration_is_contextmenu"; then
	({
		for INTEGRATION_SCRIPT in "${__integration_script_candidates[@]}"; do
			if ! [ -f "$INTEGRATION_SCRIPT" ]; then continue; fi
			if [[ "$INTEGRATION_SCRIPT" =~ .*/_default.sh ]]; then
				__menu_section=defaults
			else
				__menu_section=program
			fi
		
			# shellcheck disable=SC1090
			source "$INTEGRATION_SCRIPT"
		done

		# Build the arguments for the tmux menu.
		__menu_args=()
		__menu_size=0
		section_size=0
		for section in defaults program static; do
			eval section_size="\$__menu_section_${section}_size"
			if [ "$section_size" -eq 0 ]; then
				continue
			fi

			# Add a separator for the section.
			__menu_section="temp"
			__menu_section_temp=()
			__menu_section_temp_size=0
			menu:separator

			# Add a header for the section if it's the program section.
			if [ "$section" = program ]; then
				menu:header "$INTEGRATION_PROGRAM"
			fi

			# Update the final context menu info.
			__menu_args+=("${__menu_section_temp[@]}")
			eval __menu_args+="(\"\${__menu_section_${section}[@]}\")"
		done

		# Get the location of the window's bottom-left.
		# shellcheck disable=SC2207
		__coords=($(tmux display-message -t "${INTEGRATION_PANE}" -p "#{pane_left} #{pane_bottom}"))

		# Display the tmux menu.
		tmux display-menu -t "$INTEGRATION_PANE" \
			-T "#[align=centre] Pane $INTEGRATION_PANE | ${INTEGRATION_PROGRAM} " \
			-x "$(( __coords[0] + 2 ))" \
			-y "$(( __coords[1] + 1 ))" \
			-- "${__menu_args[@]}"
	}) || exit $?
	exit 0
fi

# Source the integration script in a subshell.
# shellcheck disable=SC1090,SC2031
({
	INTEGRATION_DIR="$(dirname -- "$INTEGRATION_SCRIPT")"
	source "$INTEGRATION_SCRIPT"
}) || exit $?

